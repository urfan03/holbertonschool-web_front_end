@import "103-sort_list";

@function sort-list($list) {
  @if (length($list) <= 1) {
    @return $list;
  }
  // Divide the list into two sub-lists: first half and rest
  $half: length($list) / 2;
  $first-half: nth($list, 1, $half);
  $rest: nth($list, ($half + 1), length($list));

  // Recursively sort the sub-lists
  $sorted-first-half: sort-list($first-half);
  $sorted-rest: sort-list($rest);

  // Merge the sorted sub-lists using efficient merge algorithm
  @return merge($sorted-first-half, $sorted-rest);
}

@function merge($list1, $list2) {
  // Base case: both lists are empty
  @if (length($list1) == 0) {
    @return $list2;
  }

  @if (length($list2) == 0) {
    @return $list1;
  }

  // Compare the first elements of each list
  $first1: nth($list1, 1);
  $first2: nth($list2, 1);

  @if (string-less($first1, $first2)) {
    // First element of list1 is smaller, prepend it and merge the rest
    @return cons($first1, merge(nth($list1, 2, length($list1)), $list2));
  } @else {
    // First element of list2 is smaller or equal, prepend it and merge the rest
    @return cons($first2, merge($list1, nth($list2, 2, length($list2))));
  }
}

// Debug output: Print the sorted list
@debug("Sorted list: " + sort-list($list_to_sort));
